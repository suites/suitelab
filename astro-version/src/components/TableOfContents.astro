---
interface Props {
  headings: Array<{ depth: number; slug: string; text: string }>;
}

const { headings } = Astro.props;

// Î™©Ï∞®Ïóê ÌëúÏãúÌï† ÏµúÎåÄ ÍπäÏù¥ (h2, h3Îßå ÌëúÏãú)
const maxDepth = 3;
const filteredHeadings = headings.filter(h => h.depth <= maxDepth && h.depth >= 2);

// Ï§ëÏ≤© Íµ¨Ï°∞Î•º ÏúÑÌïú Îì§Ïó¨Ïì∞Í∏∞ Í≥ÑÏÇ∞
function getIndentLevel(depth: number): number {
  return depth - 2; // h2Îäî 0, h3Îäî 1
}
---

{filteredHeadings.length > 0 && (
  <nav class="table-of-contents" aria-label="Î™©Ï∞®">
    <div class="toc-header">
      <h3 class="toc-title">
        <span class="toc-icon" aria-hidden="true">üìã</span>
        Î™©Ï∞®
      </h3>
      <div class="toc-progress">
        <div class="progress-bar" id="toc-progress"></div>
      </div>
    </div>
    
    <ol class="toc-list">
      {filteredHeadings.map((heading) => (
        <li 
          class="toc-item"
          style={`--indent-level: ${getIndentLevel(heading.depth)}`}
          data-heading-id={heading.slug}
        >
          <a 
            href={`#${heading.slug}`}
            class="toc-link"
            data-heading={heading.slug}
          >
            <span class="toc-marker" aria-hidden="true"></span>
            <span class="toc-text">{heading.text}</span>
          </a>
        </li>
      ))}
    </ol>
  </nav>
)}

<style>
  .table-of-contents {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
    backdrop-filter: blur(10px);
    position: relative;
    max-height: 70vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(12, 158, 228, 0.5) transparent;
  }
  
  .table-of-contents::-webkit-scrollbar {
    width: 4px;
  }
  
  .table-of-contents::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .table-of-contents::-webkit-scrollbar-thumb {
    background: rgba(12, 158, 228, 0.5);
    border-radius: 2px;
  }
  
  .toc-header {
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .toc-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
    font-weight: 700;
    color: white;
  }
  
  .toc-icon {
    font-size: 1.1rem;
  }
  
  .toc-progress {
    width: 100%;
    height: 2px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 1px;
    overflow: hidden;
  }
  
  .progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #0c9ee4, #e74c3c);
    border-radius: 1px;
    transition: width 0.2s ease;
    width: 0%;
  }
  
  .toc-list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .toc-item {
    padding-left: calc(var(--indent-level) * 1rem);
    position: relative;
  }
  
  .toc-item::before {
    content: '';
    position: absolute;
    left: calc(var(--indent-level) * 1rem - 0.5rem);
    top: 0.75rem;
    width: 1px;
    height: calc(100% - 0.75rem);
    background: rgba(255, 255, 255, 0.1);
  }
  
  .toc-item:last-child::before {
    display: none;
  }
  
  .toc-link {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem 0.75rem;
    color: rgba(255, 255, 255, 0.7);
    text-decoration: none;
    border-radius: 6px;
    transition: all 0.2s ease;
    font-size: 0.9rem;
    line-height: 1.4;
    border-left: 2px solid transparent;
  }
  
  .toc-link:hover,
  .toc-link:focus {
    color: white;
    background: rgba(12, 158, 228, 0.1);
    border-left-color: #0c9ee4;
  }
  
  .toc-link.active {
    color: #0c9ee4;
    background: rgba(12, 158, 228, 0.15);
    border-left-color: #0c9ee4;
    font-weight: 600;
  }
  
  .toc-marker {
    width: 6px;
    height: 6px;
    background: currentColor;
    border-radius: 50%;
    flex-shrink: 0;
    opacity: 0.5;
    transition: all 0.2s ease;
  }
  
  .toc-link:hover .toc-marker,
  .toc-link.active .toc-marker {
    opacity: 1;
    transform: scale(1.2);
  }
  
  .toc-text {
    flex: 1;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  /* Î∞òÏùëÌòï ÎîîÏûêÏù∏ */
  @media (max-width: 1024px) {
    .table-of-contents {
      max-height: none;
      padding: 1rem;
    }
    
    .toc-header {
      margin-bottom: 0.75rem;
      padding-bottom: 0.75rem;
    }
    
    .toc-title {
      font-size: 0.95rem;
    }
    
    .toc-link {
      padding: 0.4rem 0.6rem;
      font-size: 0.85rem;
    }
  }
  
  @media (max-width: 768px) {
    .table-of-contents {
      padding: 0.75rem;
    }
    
    .toc-item {
      padding-left: calc(var(--indent-level) * 0.75rem);
    }
    
    .toc-item::before {
      left: calc(var(--indent-level) * 0.75rem - 0.375rem);
    }
  }
  
  /* Ï†ëÍ∑ºÏÑ± */
  .toc-link:focus-visible {
    outline: 2px solid #0c9ee4;
    outline-offset: 2px;
  }
  
  /* Î™®ÏÖò ÏÑ†Ìò∏ÎèÑ Í∞êÏÜå */
  @media (prefers-reduced-motion: reduce) {
    .toc-link,
    .toc-marker,
    .progress-bar {
      transition: none;
    }
  }
</style>

<script>
  // Î™©Ï∞® ÌôúÏÑ±Ìôî Î∞è ÏßÑÌñâÎ•† ÌëúÏãú Ïä§ÌÅ¨Î¶ΩÌä∏
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll<HTMLAnchorElement>('.toc-link');
    const progressBar = document.getElementById('toc-progress') as HTMLElement;
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    
    if (!tocLinks.length || !progressBar || !headings.length) return;
    
    // Intersection ObserverÎ°ú ÌòÑÏû¨ Î≥¥Í≥† ÏûàÎäî ÏÑπÏÖò Ï∂îÏ†Å
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.id;
        const tocLink = document.querySelector(`[data-heading="${id}"]`);
        
        if (entry.isIntersecting && tocLink) {
          // Î™®Îì† ÎßÅÌÅ¨ ÎπÑÌôúÏÑ±Ìôî
          tocLinks.forEach(link => link.classList.remove('active'));
          // ÌòÑÏû¨ ÎßÅÌÅ¨ ÌôúÏÑ±Ìôî
          tocLink.classList.add('active');
        }
      });
    }, {
      rootMargin: '-20% 0px -80% 0px'
    });
    
    // Î™®Îì† Ìó§Îî© Í¥ÄÏ∞∞
    headings.forEach(heading => {
      if (heading.id) {
        observer.observe(heading);
      }
    });
    
    // Ïä§ÌÅ¨Î°§ ÏßÑÌñâÎ•† ÌëúÏãú
    function updateProgress() {
      const scrollTop = window.pageYOffset;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrolled = (scrollTop / docHeight) * 100;
      
      if (progressBar) {
        progressBar.style.width = `${Math.min(scrolled, 100)}%`;
      }
    }
    
    // Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà (throttled)
    let ticking = false;
    function onScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          updateProgress();
          ticking = false;
        });
        ticking = true;
      }
    }
    
    window.addEventListener('scroll', onScroll, { passive: true });
    
    // Ï¥àÍ∏∞ ÏßÑÌñâÎ•† ÏÑ§Ï†ï
    updateProgress();
    
    // Î∂ÄÎìúÎü¨Ïö¥ Ïä§ÌÅ¨Î°§
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = document.getElementById(targetId || '');
        
        if (targetElement) {
          const offset = 100; // Ìó§Îçî ÎÜíÏù¥ Í≥†Î†§
          const targetPosition = targetElement.offsetTop - offset;
          
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
      });
    });
  });
</script>